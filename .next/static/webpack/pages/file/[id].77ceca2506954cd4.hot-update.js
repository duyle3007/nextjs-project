"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/file/[id]",{

/***/ "./utils/glossaryUtils.js":
/*!********************************!*\
  !*** ./utils/glossaryUtils.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"detectGlossary\": function() { return /* binding */ detectGlossary; },\n/* harmony export */   \"displayAsHTML\": function() { return /* binding */ displayAsHTML; },\n/* harmony export */   \"sortGlossaryList\": function() { return /* binding */ sortGlossaryList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./utils/utils.js\");\n/* harmony import */ var react_dom_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom/server */ \"./node_modules/react-dom/server.browser.js\");\n\n\n\nconst replacementCode = \"XxcD5JZ73PDgM4PBDWYtfKMKAakSuRsG\";\nfunction replacementFunction(m) {\n    return replacementCode.repeat(m.length);\n}\nconst replaceTextWithGlossary = (text, termMatchGlossary, termList, sourceCell, termSourceMatchGlossary)=>{\n    let newText = text;\n    let increasedTooltip = 0;\n    termMatchGlossary.forEach((param)=>{\n        let [i, termMatch] = param;\n        let tranlationOfTerm, sourceOfTerm, termNote;\n        let sourceTermAppear = false;\n        for (const term of termList){\n            if (term.sourceValues.some((value)=>value.toLowerCase() === termMatch.toLowerCase())) {\n                tranlationOfTerm = term.translations;\n                termNote = term.note;\n                break;\n            } else if (term.translations.some((value)=>value.toLowerCase() === termMatch.toLowerCase())) {\n                sourceOfTerm = term.sourceValues;\n                termNote = term.note;\n                break;\n            }\n        }\n        sourceTermAppear = sourceOfTerm === null || sourceOfTerm === void 0 ? void 0 : sourceOfTerm.some((value2)=>{\n            return termSourceMatchGlossary === null || termSourceMatchGlossary === void 0 ? void 0 : termSourceMatchGlossary.some((param)=>{\n                let [_, value1] = param;\n                return value1.toLowerCase() === value2.toLowerCase();\n            });\n        });\n        const tooltipContent = (0,react_dom_server__WEBPACK_IMPORTED_MODULE_2__.renderToString)(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n            className: \"glossary-tooltip\",\n            children: [\n                termMatch,\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"tooltip\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                            children: termMatch\n                        }, void 0, false, {\n                            fileName: \"/Users/fetch/Documents/gnosis/utils/glossaryUtils.js\",\n                            lineNumber: 54,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"translateValue\",\n                            children: sourceOfTerm ? sourceOfTerm === null || sourceOfTerm === void 0 ? void 0 : sourceOfTerm.join(\", \") : tranlationOfTerm === null || tranlationOfTerm === void 0 ? void 0 : tranlationOfTerm.join(\", \")\n                        }, void 0, false, {\n                            fileName: \"/Users/fetch/Documents/gnosis/utils/glossaryUtils.js\",\n                            lineNumber: 55,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"note\",\n                            children: termNote\n                        }, void 0, false, {\n                            fileName: \"/Users/fetch/Documents/gnosis/utils/glossaryUtils.js\",\n                            lineNumber: 60,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/fetch/Documents/gnosis/utils/glossaryUtils.js\",\n                    lineNumber: 53,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/fetch/Documents/gnosis/utils/glossaryUtils.js\",\n            lineNumber: 51,\n            columnNumber: 7\n        }, undefined));\n        if (sourceOfTerm && sourceTermAppear || !sourceOfTerm) {\n            newText = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.replaceTextAtIndex)(newText, i + increasedTooltip, termMatch.length, tooltipContent);\n            increasedTooltip = increasedTooltip + tooltipContent.length - termMatch.length;\n        }\n    });\n    return newText;\n};\nfunction displayAsHTML(textAreaText, termMatchGlossary, termList, sourceCell, termSourceMatchGlossary) {\n    let textWithGlossary = replaceTextWithGlossary(textAreaText, termMatchGlossary, termList, sourceCell, termSourceMatchGlossary);\n    let textWithSpacesBeforePunctuationReplaced = textWithGlossary.replace(/ +(?=[\\.\\!\\?])/g, replacementFunction);\n    // bôi đen những chỗ có hơn hai dấu cách liền.\n    let textWithSpacesReplaced = textWithSpacesBeforePunctuationReplaced.replace(RegExp(\"(?<= ) +\", \"g\"), replacementFunction);\n    // khi nào dấu cách thừa xuất hiện ngay sau dấu . ? !, mình thay thế dấu ⎵ đầu tiên bằng &nbsp; để cho phép user có hai dấu cách sau . ? !.\n    const regex = new RegExp(\"(?<=[.?!]) \" + replacementCode, \"g\");\n    let textAllowingDoubleSpaceAfterEndOfSentence = textWithSpacesReplaced.replace(regex, \" &nbsp;\");\n    // thay thế các dấu cách thừa bằng dấu ⎵ màu dỏ\n    let textWithSpacesAsUnderscores = textAllowingDoubleSpaceAfterEndOfSentence.replaceAll(replacementCode, \"<font color=#F00>⎵</font>\");\n    return textWithSpacesAsUnderscores;\n}\nfunction sortGlossaryList(glossary) {\n    glossary.forEach(function(term, i) {\n        glossary[i] = term.toLowerCase();\n    });\n    return glossary.sort((a, b)=>b.length - a.length);\n}\n/**\n * A complete match of term in string is when term matches a complete word or\n * phrase in string and no partial words in string are left hanging off the\n * start or end. For example, if term is \"full\" and string is \"beautifully\", that\n * is not a complete match because \"beauti\" hangs off the beginning and \"y\" extends\n * before the start of the section of matching text.\n **/ function completeMatchBoundaries(string, startIndex, segmenter, term) {\n    // initialize values for output\n    // this is the output as it should be if no match is found\n    let matchBoundaries = {\n        naiveMatch: false,\n        completeMatch: false,\n        naiveMatchStart: -1,\n        naiveMatchEnd: -1,\n        completeMatchStart: -1,\n        completeMatchEnd: -1\n    };\n    // find a match by simple string search, starting at startIndex.\n    let unsearchedPartOfString = string.substring(startIndex);\n    let matchIndex = unsearchedPartOfString.indexOf(term) + startIndex;\n    // if no simple match was found, return\n    if (matchIndex < startIndex) return matchBoundaries;\n    // if we reach this point then a naive match was found.\n    // update naive match boundary information accordingly.\n    matchBoundaries.naiveMatch = true;\n    matchBoundaries.naiveMatchStart = matchIndex;\n    matchBoundaries.naiveMatchEnd = matchIndex + term.length - 1;\n    // segment the string\n    let stringSegments = segmenter.segment(string);\n    // get the string segment that contains the match index.\n    // this is the first word in string that matches term\n    let firstMatchingSegment = stringSegments.containing(matchIndex);\n    // if the index of the matching segment doesn't match the matchIndex found\n    // by naive search, it's a partial match. Return the boundary info as-is\n    // without complete match data.\n    if (firstMatchingSegment.index < matchIndex) return matchBoundaries;\n    /**\n   * at this point we know that the first character in \"term\" is the first\n   * character of a segment in string. now we need to check if the last character\n   * in \"term\" is also aligned with the last character of a segment in string.\n   **/ // get the string segment that contains the last character of term\n    let lastMatchingSegment = stringSegments.containing(matchBoundaries.naiveMatchEnd);\n    // get the index of the last character of that string segment\n    let endOfLastMatchingSegment = lastMatchingSegment.index + lastMatchingSegment.segment.length - 1;\n    // if the end of the last matching segment matches with the end of the naive \"indexOf\"\n    // match then the match is a complete match with no extra word characters hanging\n    // off the start or end.\n    if (endOfLastMatchingSegment == matchBoundaries.naiveMatchEnd) {\n        // update the complete match boundary info\n        matchBoundaries.completeMatch = true;\n        matchBoundaries.completeMatchStart = firstMatchingSegment.index;\n        matchBoundaries.completeMatchEnd = endOfLastMatchingSegment;\n    }\n    return matchBoundaries;\n}\n/**\n * Searches \"string\" for terms in \"glossary\" and gives the location where each term appears. If several glossary terms overlap, matching on the same words then the longest term takes precedence.\n *\n * @param string - the text string in which we want to search for glossary terms\n * @param glossary - an array of text strings, all the terms in the glossary. This list may contain several thousand items.\n * @param languageCode - ISO 639-1 language code\n * @returns {array} - a list of pairs [index, term] where int is the index at which term appears in string.\n **/ function glossaryMatches(string, allGlossary) {\n    let caseSensitive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, textInfo = arguments.length > 3 ? arguments[3] : void 0, originalTermList = arguments.length > 4 ? arguments[4] : void 0;\n    // make a copy of string so that the original is not lost when we modify it\n    let stringCopy = string;\n    // if the search is not case-sensitive, convert everything to lower case\n    if (!caseSensitive) {\n        string = string.toLowerCase();\n    }\n    // split the string into segments, separating by word\n    let segmenter = new Intl.Segmenter(textInfo.language, {\n        granularity: \"word\"\n    });\n    let output = Array(0);\n    // for each list of terms in the sorted glossary\n    allGlossary === null || allGlossary === void 0 ? void 0 : allGlossary.srcGlossary.forEach(function(term) {\n        // we start searching for \"term\" starting from the beginning of \"string\"\n        let searchStartIndex = 0;\n        // find the location in \"string\" where the \"term\" is found\n        let matchBoundaries = completeMatchBoundaries(string, searchStartIndex, segmenter, term);\n        // if \"term\" was found in \"string\" by naive indexOf search\n        while(matchBoundaries.naiveMatch && textInfo.language === originalTermList[0].sourceLanguage){\n            // since a naive match was found, we update the searchStartIndex to prevent\n            // finding that same naive match again in the future.\n            searchStartIndex = matchBoundaries.naiveMatchEnd + 1;\n            // if the match is a complete match, record it, then erase it from string to\n            // prevent shorter terms from double-matching on it later on.\n            if (matchBoundaries.completeMatch) {\n                // get a shorter variable name for the index where the naive match was found\n                let matchIndex = matchBoundaries.naiveMatchStart;\n                // get the original term from the copy of string, in case the case-insentitive\n                // search caused the string to be modified\n                let originalTerm = stringCopy.substring(matchIndex, matchIndex + term.length);\n                // add the term to the output list\n                output.push([\n                    matchIndex,\n                    originalTerm\n                ]);\n                // Erase the corresponding characters in string so that subsequent\n                // terms in the glossary can't match with the same text.\n                //\n                // Because our glossary is sorted with longest terms first,\n                // this ensures that longer matches take precendence over shorter\n                // ones.\n                string = string.replace(term, \" \".repeat(term.length));\n            }\n            // check to see if there are other places in \"string\" that match \"term\".\n            // If there are, the while loop will repeat.\n            matchBoundaries = completeMatchBoundaries(string, searchStartIndex, segmenter, term);\n        }\n    });\n    allGlossary === null || allGlossary === void 0 ? void 0 : allGlossary.targetGlossary.forEach(function(term) {\n        // we start searching for \"term\" starting from the beginning of \"string\"\n        let searchStartIndex = 0;\n        // find the location in \"string\" where the \"term\" is found\n        let matchBoundaries = completeMatchBoundaries(string, searchStartIndex, segmenter, term);\n        // if \"term\" was found in \"string\" by naive indexOf search\n        while(matchBoundaries.naiveMatch && textInfo.language === originalTermList[0].targetLanguage){\n            // since a naive match was found, we update the searchStartIndex to prevent\n            // finding that same naive match again in the future.\n            searchStartIndex = matchBoundaries.naiveMatchEnd + 1;\n            // if the match is a complete match, record it, then erase it from string to\n            // prevent shorter terms from double-matching on it later on.\n            if (matchBoundaries.completeMatch) {\n                // get a shorter variable name for the index where the naive match was found\n                let matchIndex = matchBoundaries.naiveMatchStart;\n                // get the original term from the copy of string, in case the case-insentitive\n                // search caused the string to be modified\n                let originalTerm = stringCopy.substring(matchIndex, matchIndex + term.length);\n                // add the term to the output list\n                output.push([\n                    matchIndex,\n                    originalTerm\n                ]);\n                // Erase the corresponding characters in string so that subsequent\n                // terms in the glossary can't match with the same text.\n                //\n                // Because our glossary is sorted with longest terms first,\n                // this ensures that longer matches take precendence over shorter\n                // ones.\n                string = string.replace(term, \" \".repeat(term.length));\n            }\n            // check to see if there are other places in \"string\" that match \"term\".\n            // If there are, the while loop will repeat.\n            matchBoundaries = completeMatchBoundaries(string, searchStartIndex, segmenter, term);\n        }\n    });\n    // sort the output by the indices and return\n    return output.sort((a, b)=>a[0] - b[0]);\n}\nconst detectGlossary = (text, glossary, textInfo, originalTermList)=>{\n    let caseSensitive = false;\n    if (text) {\n        return glossaryMatches(text, glossary, caseSensitive, textInfo, originalTermList);\n    } else {\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/glossaryUtils.js\n"));

/***/ })

});